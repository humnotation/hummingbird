{
  "name": "grunt-mocha",
  "description": "Grunt task for running client-side Mocha specs in PhantomJS",
  "version": "0.4.10",
  "homepage": "https://github.com/kmiyashiro/grunt-mocha",
  "author": {
    "name": "Kelly Miyashiro",
    "email": "miyashiro.kelly@gmail.com",
    "url": "http://non-diligent.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/kmiyashiro/grunt-mocha.git"
  },
  "bugs": {
    "url": "https://github.com/kmiyashiro/grunt-mocha/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/kmiyashiro/grunt-mocha/blob/master/LICENSE-MIT"
    }
  ],
  "main": "Gruntfile.js",
  "engines": {
    "node": "*"
  },
  "scripts": {
    "test": "./node_modules/.bin/grunt test"
  },
  "dependencies": {
    "grunt-lib-phantomjs": "~0.4",
    "mocha": "~1.14",
    "lodash": "~2.3.0"
  },
  "peerDependencies": {
    "grunt": "~0.4"
  },
  "devDependencies": {
    "grunt": "~0.4",
    "grunt-contrib-connect": "~0.2",
    "grunt-contrib-jshint": "~0.3"
  },
  "keywords": [
    "gruntplugin",
    "mocha",
    "test",
    "phantomjs"
  ],
  "files": [
    "growl",
    "phantomjs",
    "support",
    "tasks"
  ],
  "readme": "# grunt-mocha\n\n> Automatically run *client-side* mocha specs via grunt/mocha/PhantomJS\n\nFor a grunt task for server-side mocha tests, see [grunt-mocha-test](https://github.com/pghalliday/grunt-mocha-test) or [grunt-simple-mocha](https://github.com/yaymukund/grunt-simple-mocha)\n\n## Getting Started\n\nThis plugin requires Grunt `~0.4.0`. Use a `0.1.x` tag of this plugin to use with Grunt `~0.3.0`.\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-mocha --save-dev\n```\n\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-mocha');\n```\n\n## Mocha task\n_Run this task with the `grunt mocha` command._\n\n### Settings\n\n#### files/src\n\nThere are a number of options available. Please review the [minimatch options here](https://github.com/isaacs/minimatch#options).\n\nExample:\n```js\nmocha: {\n  test: {\n    src: ['tests/**/*.html'],\n  },\n},\n```\n\n#### tasks\nType: `String|Array`\n\nThis defines which HTML spec files to run using PhantomJS. These are the same files you would open to run tests in a browser.\n\n#### dest\nType: `String`  \nDefault: `undefined`\n\nWrite reporter output to a file. Useful if you need a file to feed your CI bot.\n\nExample:\n```js\nmocha: {\n  test: {\n    src: ['tests/**/*.html'],\n    reporter: 'XUnit',\n    dest: './test/output/xunit.out',\n  },\n},\n```\n\n#### options.run\nType: `Boolean`  \nDefault: `false`\n\n**NOTE:** This will probably default to true in `0.5`.\n\ngrunt-mocha injects a script into the PhantomJS instance that loads your HTML spec files. The file sets up a reporter and listeners so the output can be output in the command line. This option will call `mocha.run()` after the script is injected, ensuring that the proper listeners are setup.\n\nYou may want to set this to false if your files are loaded asynchronously via AMD and call `mocha.run` in your own callback.\n\nIn HTML spec:\n```html\n<!-- run mocha after all test are loaded -->\n<script type=\"text/javascript\" charset=\"utf-8\">\n  // Only tests run in real browser, injected script run if options.run == true\n  if (navigator.userAgent.indexOf('PhantomJS') < 0) {\n    mocha.run();\n  }\n</script>\n```\n\nGruntfile:\n```js\nmocha: {\n  test: {\n    src: ['tests/**/*.html'],\n    options: {\n      run: true,\n    },\n  },\n},\n```\n\n#### options.urls\nType: `Array|String`  \nDefault: `[]`\n\nInstead of files, hit these URLs. Usually used in conjunction with the connect task to spin up a server for testing.\n\n```js\nconnect: {\n  server: {\n    options: {\n      port: 8888,\n      base: '.',\n    },\n  },\n},\nmocha: {\n  test: {\n    options: {\n      urls: [ 'http://localhost:8888/example/test/test2.html' ],\n    },\n  },\n},\n```\n\nThen run:\n```\ngrunt connect mocha\n```\n\n#### options.timeout\nType: `Number`  \nDefault: `5000`\n\nPhantomJS timeout in milliseconds. If nothing happens within 5 seconds, exit.\n\nExample:\n```js\nmocha: {\n  test: {\n    src: ['tests/**/*.html'],\n    options: {\n      timeout: 10000,\n    },\n  },\n},\n```\n\n#### options.bail\nType: `Boolean`  \nDefault: `false`\n\nCall `grunt.warn` and exit the grunt task on the first failed test. This only calls `grunt.warn` after the entire spec file is finished.\n\nExample:\n```js\nmocha: {\n  test: {\n    src: ['tests/**/*.html'],\n    options: {\n      bail: true,\n    },\n  },\n},\n```\n\n#### options.log\nType: `Boolean`  \nDefault: `false`\n\nPrint any `console.log` calls from PhantomJS to the command line. Only used for very quick and dirty debugging. It is highly recommended that you open the failing spec file in a browser so you can use much richer debugging tools.\n\nExample:\n```js\nmocha: {\n  test: {\n    src: ['tests/**/*.html'],\n    options: {\n      log: true,\n    },\n  },\n},\n```\n\n#### options.logErrors\nType: `Boolean`  \nDefault: `false`\n\nFail and output script errors.\n\nExample:\n```js\nmocha: {\n  test: {\n    src: ['tests/**/*.html'],\n    options: {\n      logErrors: true,\n    },\n  },\n},\n```\n\n#### options.mocha\nType: `Object`\n\nA mocha options simple object. Very few options are currently supported. Actually, I think `grep` is the only one.\n\nExample:\n```js\nmocha: {\n  test: {\n    src: ['tests/**/*.html'],\n    options: {\n      mocha: {\n        grep: 'router*'\n      }\n    }\n  },\n},\n```\n\n#### options.reporter\nType: `String`  \nDefault: `'Spec'`\n\nThe reporter to use. **Note:** XUnit and those types of reporters should probably use the `dest` option.\n\nExample:\n```js\nmocha: {\n  test: {\n    files: ['tests/**/*.html'],\n    options: {\n      reporter: 'Nyan',\n    }\n  },\n},\n```\n\nCustom reporter example:\nExample:\n```js\nmocha: {\n  test: {\n    files: ['tests/**/*.html'],\n    options {\n      reporter: './path/to/custom/reporter', // included via require\n    },\n  },\n},\n```\n\n## Hacks\n\nThe PhantomJS -> Grunt superdimensional conduit uses `alert`. If you have disabled or aliased alert in your app, this won't work. I have conveniently set a global `PHANTOMJS` on `window` so you can conditionally override alert in your app.\n\n## Examples\n\n### Vanilla JS\n\n#### Option 1 (recommended)\n\n- Write mocha task description in grunt config using and specify `run: true` option (see [this task's Gruntfile.js](Gruntfile.js) for details);\n- Check for PhantomJS `userAgent` in a test html file and run tests only in a real browser (see [test2.html](example/test/test2.html) for details).\n\nIn this case you shouldn't include [bridge.js](phantomjs/bridge.js) (it will be included automatically) and tests will be run from [bridge.js](phantomjs/bridge.js).\n\n#### Option 2\n\nAlternatively, include `bridge.js` from `tasks/phantomjs` after you include `mocha.js` and run `mocha.setup` in your HTML file. The helper will override `mocha.setup` if it detects PhantomJS. See [test.html](example/test/test.html).\n\n### AMD\n\nMocha **must** be included via script tag in the header. There is no need to load Mocha via AMD. You may load other testing libs via AMD if that gives you a fuzzy feeling.\n\nExample setup with AMD (advanced): https://gist.github.com/2655876\n\n## License\nCopyright (c) 2013 Kelly Miyashiro\nLicensed under the MIT license.\n",
  "readmeFilename": "README.md",
  "_id": "grunt-mocha@0.4.10",
  "_from": "grunt-mocha@"
}
